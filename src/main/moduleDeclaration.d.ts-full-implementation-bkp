declare module '*.gif';
declare module '*.png';

type MoneroRpcConfig = {
  uri: string,
  username?: string,
  password?: string,
  rejectUnauthorized?: boolean
}

declare module 'monero-javascript' {
  declare module LibraryUtils {
    function loadFullModule(): Promise<MoneroWalletFull>;
    function loadKeysModule(): Promise<MoneroWalletKeys>;
  }
  
  export function createWalletFull(config: {
    path?: string,
    password?: string,
    networkType?: string | number,
    mnemonic?: string,
    seedOffset?: string,
    primaryAddress?: string,
    privateViewKey?: string,
    privateSpendKey?: string,
    restoreHeight?: number,
    language?: string,
    serverUri?: string,
    serverUsername?: string,
    serverPassword?: string,
    rejectUnauthorized?: boolean,
    server?: MoneroRpcConnection | MoneroRpcConfig,
    proxyToWorker?: boolean,
    fs?: fs
  }): MoneroWalletFull
  
  declare module MoneroNetworkType {
    const MAINNET: number;
    const STAGENET: number;
    const TESTNET: number;
  }
  
  declare module MoneroWalletListener {
    export class MoneroWalletListener {
      constructor();
    }

  }
  
  declare module MoneroUtils {
    function validatePrivateViewKey(viewKey: string): void;
    function isValidAddress(address: string, networkType: MoneroNetworkType): boolean;
  }
  
  
  declare module MoneroWalletFull{
    class MoneroWalletFull {
      async addListener(listener: MoneroWalletListener): Promise<void>;
      async startSyncing(): void;
    }    
  }
  
  declare module BigInteger{
    class BigInteger {
      BigInteger();
      BigInteger(n: number);
    }
    
  }
  
  module.exports = MoneroWalletFull;
}
declare module 'jsbn';